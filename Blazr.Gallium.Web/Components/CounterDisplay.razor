@using System.Diagnostics
@inject IMessageBus MessageBus

<h3>CounterDisplay - @_message.Value </h3>

@code {
    private CounterMessage _message = new();

    protected override void OnInitialized()
    {
        this.MessageBus.Subscribe<CounterMessage>(Update);
    }

    private void Update(object value)
    {
        try
        {
            Trace.TraceInformation($"CounterDisplay Called - Thread {Thread.CurrentThread.ManagedThreadId}");
            if (value is CounterMessage message)
                _message = message;

            this.InvokeAsync(StateHasChanged);
            Trace.TraceInformation($"CounterDisplay Completed - Thread {Thread.CurrentThread.ManagedThreadId}");
        }
        catch (Exception ex)
        {
            Trace.TraceError($"The message handler raised an Exception. Exception message: {ex.Message}");
        }
    }


    public void Dispose()
    {
        this.MessageBus.UnSubscribe<CounterMessage>(Update);
    }
}
